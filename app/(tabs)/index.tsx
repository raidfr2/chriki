import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  Text,
  TouchableOpacity,
  Image,
} from 'react-native';
import { Message } from '@/types/message';
import { generateAIResponse } from '@/services/chatService';
import MessageBubble from '@/components/MessageBubble';
import ChatInput from '@/components/ChatInput';
import TypingIndicator from '@/components/TypingIndicator';
import { Menu, ArrowRight, Chrome as Home, MessageSquare, ChartBar as BarChart3, FileText, Settings } from 'lucide-react-native';

export default function ChatScreen() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [showWelcome, setShowWelcome] = useState(true);
  const scrollViewRef = useRef<ScrollView>(null);

  const chatHistory = [
    { id: '1', title: 'What is a wild animal?', category: 'UI/UX Design' },
    { id: '2', title: 'iOS', category: 'Meaning of white rose' },
  ];

  const popularPrompts = [
    {
      id: '1',
      title: 'Explain about Sushi Roll receipt',
      subtitle: 'Generated by Gemini Pro',
      color: '#E8F5E8',
      textColor: '#2D5016',
      icon: '🍣',
      prompt: 'Explain about sushi roll receipt and how to make one'
    },
    {
      id: '2',
      title: 'Give the best resolution for 2025',
      subtitle: 'Generated by Gemini Pro',
      color: '#E3F2FD',
      textColor: '#1565C0',
      icon: '🎯',
      prompt: 'Give me the best New Year resolutions for 2025'
    }
  ];

  useEffect(() => {
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  }, [messages, isTyping]);

  const handleSendMessage = async (messageText: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setShowWelcome(false);
    setIsTyping(true);

    try {
      const aiResponseText = await generateAIResponse(messageText);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: aiResponseText,
        sender: 'ai',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "I'm sorry, I'm having trouble responding right now. Please try again.",
        sender: 'ai',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handlePromptPress = (prompt: any) => {
    handleSendMessage(prompt.prompt);
  };

  const handleStartNewChat = () => {
    handleSendMessage("Hello! I'd like to start a new conversation.");
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.menuButton}>
          <Menu size={24} color="#000000" />
        </TouchableOpacity>
        
        <View style={styles.headerCenter}>
          <View style={styles.logoContainer}>
            <View style={styles.logoIcon}>
              <Text style={styles.logoText}>A</Text>
            </View>
            <Text style={styles.logoTitle}>Aidora</Text>
          </View>
        </View>
        
        <TouchableOpacity style={styles.profileButton}>
          <View style={styles.profileAvatar}>
            <Text style={styles.profileText}>👤</Text>
          </View>
        </TouchableOpacity>
      </View>
      
      <KeyboardAvoidingView
        style={styles.keyboardAvoid}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          {showWelcome && messages.length === 0 && (
            <View style={styles.welcomeContainer}>
              <Text style={styles.welcomeTitle}>How can I help you today?</Text>
              
              {/* Start New Chat Button */}
              <TouchableOpacity style={styles.startChatButton} onPress={handleStartNewChat}>
                <Text style={styles.startChatText}>Start New Chat</Text>
                <View style={styles.startChatIcon}>
                  <ArrowRight size={20} color="#000000" />
                </View>
              </TouchableOpacity>

              {/* Chat History Section */}
              <View style={styles.section}>
                <View style={styles.sectionHeader}>
                  <Text style={styles.sectionTitle}>Chat history</Text>
                  <TouchableOpacity>
                    <Text style={styles.seeAllText}>See All</Text>
                  </TouchableOpacity>
                </View>
                
                <View style={styles.historyContainer}>
                  {chatHistory.map((item) => (
                    <View key={item.id} style={styles.historyItem}>
                      <Text style={styles.historyTitle}>{item.title}</Text>
                      <Text style={styles.historyCategory}>{item.category}</Text>
                    </View>
                  ))}
                  <TouchableOpacity style={styles.moreButton}>
                    <Text style={styles.moreText}>More</Text>
                  </TouchableOpacity>
                </View>
              </View>

              {/* Popular Prompts Section */}
              <View style={styles.section}>
                <View style={styles.sectionHeader}>
                  <Text style={styles.sectionTitle}>Popular Prompt</Text>
                  <TouchableOpacity>
                    <Text style={styles.seeAllText}>See All</Text>
                  </TouchableOpacity>
                </View>
                
                <View style={styles.promptsContainer}>
                  {popularPrompts.map((prompt) => (
                    <TouchableOpacity
                      key={prompt.id}
                      style={[styles.promptCard, { backgroundColor: prompt.color }]}
                      onPress={() => handlePromptPress(prompt)}
                    >
                      <Text style={[styles.promptTitle, { color: prompt.textColor }]}>
                        {prompt.title}
                      </Text>
                      <Text style={styles.promptSubtitle}>{prompt.subtitle}</Text>
                      <View style={styles.promptIcon}>
                        <Text style={styles.promptEmoji}>{prompt.icon}</Text>
                      </View>
                      <TouchableOpacity style={styles.usePromptButton}>
                        <Text style={styles.usePromptText}>Use this prompt</Text>
                      </TouchableOpacity>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>
            </View>
          )}

          {messages.map((message) => (
            <MessageBubble key={message.id} message={message} />
          ))}
          {isTyping && <TypingIndicator />}
        </ScrollView>
        
        <ChatInput
          onSendMessage={handleSendMessage}
          disabled={isTyping}
        />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
  },
  menuButton: {
    padding: 4,
  },
  headerCenter: {
    flex: 1,
    alignItems: 'center',
  },
  logoContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  logoIcon: {
    width: 24,
    height: 24,
    backgroundColor: '#E8F5E8',
    borderRadius: 6,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
  },
  logoText: {
    fontSize: 14,
    fontWeight: '700',
    color: '#2D5016',
  },
  logoTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#000000',
  },
  profileButton: {
    padding: 4,
  },
  profileAvatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#E3F2FD',
    justifyContent: 'center',
    alignItems: 'center',
  },
  profileText: {
    fontSize: 16,
  },
  keyboardAvoid: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  welcomeContainer: {
    padding: 20,
  },
  welcomeTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#000000',
    marginBottom: 24,
  },
  startChatButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#E8F5E8',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderRadius: 25,
    marginBottom: 32,
  },
  startChatText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000000',
  },
  startChatIcon: {
    width: 32,
    height: 32,
    backgroundColor: '#C8E6C9',
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  section: {
    marginBottom: 32,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000000',
  },
  seeAllText: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
  },
  historyContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  historyItem: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#E5E5EA',
  },
  historyTitle: {
    fontSize: 12,
    fontWeight: '500',
    color: '#000000',
  },
  historyCategory: {
    fontSize: 10,
    color: '#8E8E93',
    marginTop: 2,
  },
  moreButton: {
    backgroundColor: '#000000',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
  },
  moreText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#FFFFFF',
  },
  promptsContainer: {
    flexDirection: 'row',
    gap: 12,
  },
  promptCard: {
    flex: 1,
    padding: 16,
    borderRadius: 16,
    minHeight: 140,
    justifyContent: 'space-between',
  },
  promptTitle: {
    fontSize: 14,
    fontWeight: '600',
    lineHeight: 18,
    marginBottom: 8,
  },
  promptSubtitle: {
    fontSize: 10,
    color: '#8E8E93',
    marginBottom: 8,
  },
  promptIcon: {
    alignSelf: 'flex-end',
    marginBottom: 8,
  },
  promptEmoji: {
    fontSize: 24,
  },
  usePromptButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  usePromptText: {
    fontSize: 10,
    fontWeight: '500',
    color: '#000000',
  },
});